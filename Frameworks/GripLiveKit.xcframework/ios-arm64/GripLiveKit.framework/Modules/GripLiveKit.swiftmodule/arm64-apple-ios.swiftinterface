// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name GripLiveKit
import Foundation
@_exported import GripLiveKit
import Security
import Swift
import SystemConfiguration
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_inheritsConvenienceInitializers @objc public class UserInfo : ObjectiveC.NSObject, Swift.Codable {
  @objc public func getId() -> Swift.String?
  @objc public func getNick() -> Swift.String?
  @objc public func getGender() -> Swift.String?
  @objc public func getAge() -> Swift.String?
  @objc public func setId(_ id: Swift.String) -> GripLiveKit.UserInfo
  @objc public func setNick(_ nick: Swift.String) -> GripLiveKit.UserInfo
  @discardableResult
  @objc public func setGender(_ gender: Swift.String) -> GripLiveKit.UserInfo
  @discardableResult
  @objc public func setAge(_ age: Swift.String) -> GripLiveKit.UserInfo
  @objc override dynamic public init()
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class ModelBuilder {
  public static func initData(channelId: Swift.String, type: Swift.String, id: Swift.String, nick: Swift.String, gender: Swift.String? = nil, age: Swift.String? = nil) -> GripLiveKit.RequestParams
  @objc deinit
}
@_hasMissingDesignatedInitializers public class GripCloudApiService {
  public static func sendRequest(url: Swift.String, request: Swift.String, channelId: Swift.String) -> Swift.Bool
  @objc deinit
}
@objc public enum VOD_TYPE : Swift.Int {
  case HOME
  case LIVE_WIDGET
  case SHORTS_WIDGET
  case BANNER_WIDGET
  case LIVE_PLAYER
  case SHORTS_PLAYER
  public var KEY: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class VOD_TYPE_Helper : ObjectiveC.NSObject {
  @objc public static func key(for type: GripLiveKit.VOD_TYPE) -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol GripCloudDelegate {
  @objc func handleError(_ code: Swift.String, message: Swift.String)
  @objc func handleSuccess(_ code: Swift.String, message: Swift.String)
  @objc func networkConnectStatus(_ isConnected: Swift.Bool, message: Swift.String)
}
@_inheritsConvenienceInitializers @objc public class GripCloud : ObjectiveC.NSObject {
  public static let shared: GripLiveKit.GripCloud
  @objc override dynamic public init()
  @objc weak public static var delegate: (any GripLiveKit.GripCloudDelegate)?
  @objc weak public static var networkDelegate: (any GripLiveKit.GripCloudDelegate)?
  @objc public static func play(channelId: Swift.String, type: Swift.String, userInfo: GripLiveKit.UserInfo, isFloating: Swift.Bool, floatingLocation: GripLiveKit.FloatingLocation, playerDelegate: any GripLiveKit.PlayerViewDelegate)
  @objc public static func getUUID() -> Swift.String
  @objc deinit
}
@objc public protocol PlayerViewDelegate {
  @objc func playerViewPresenting(isPresent: Swift.Bool, message: Swift.String)
  @objc func webViewDidFinishLoad(isLoad: Swift.Bool, message: Swift.String)
}
@objc public enum CustomSuccess : Swift.Int {
  case playSuccess
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class CustomSuccessHelper : ObjectiveC.NSObject {
  @objc public static func code(for success: GripLiveKit.CustomSuccess) -> Swift.String
  @objc public static func description(for success: GripLiveKit.CustomSuccess) -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class RequestParams : Swift.Codable {
  public func getAccessKey() -> Swift.String?
  public func getOsCd() -> Swift.String?
  public func getSecretKey() -> Swift.String?
  public func getUserId() -> Swift.String?
  public func getChannelId() -> Swift.String?
  public func getType() -> Swift.String?
  public func getUserInfo() -> GripLiveKit.UserInfo?
  public func setAccessKey(_ accessKey: Swift.String) -> GripLiveKit.RequestParams
  public func setSecretKey(_ secretKey: Swift.String) -> GripLiveKit.RequestParams
  public func setOsCd(_ osCd: Swift.String) -> GripLiveKit.RequestParams
  public func setUserId(_ userId: Swift.String) -> GripLiveKit.RequestParams
  public func setChannelId(_ channelId: Swift.String) -> GripLiveKit.RequestParams
  public func setType(_ type: Swift.String) -> GripLiveKit.RequestParams
  public func setMemberData(_ userInfo: GripLiveKit.UserInfo) -> GripLiveKit.RequestParams
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc public enum CustomError : Swift.Int {
  case authFailed
  case networkError
  case serverError
  case invalidData
  case invalidChannelId
  case encodingFailed
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class CustomErrorHelper : ObjectiveC.NSObject {
  @objc public static func code(for error: GripLiveKit.CustomError) -> Swift.String
  @objc public static func description(for error: GripLiveKit.CustomError) -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum FloatingLocation : Swift.Int {
  case topLeft
  case topRight
  case bottomLeft
  case bottomRight
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension GripLiveKit.VOD_TYPE : Swift.Equatable {}
extension GripLiveKit.VOD_TYPE : Swift.Hashable {}
extension GripLiveKit.VOD_TYPE : Swift.RawRepresentable {}
extension GripLiveKit.CustomSuccess : Swift.Equatable {}
extension GripLiveKit.CustomSuccess : Swift.Hashable {}
extension GripLiveKit.CustomSuccess : Swift.RawRepresentable {}
extension GripLiveKit.CustomError : Swift.Equatable {}
extension GripLiveKit.CustomError : Swift.Hashable {}
extension GripLiveKit.CustomError : Swift.RawRepresentable {}
extension GripLiveKit.FloatingLocation : Swift.Equatable {}
extension GripLiveKit.FloatingLocation : Swift.Hashable {}
extension GripLiveKit.FloatingLocation : Swift.RawRepresentable {}
