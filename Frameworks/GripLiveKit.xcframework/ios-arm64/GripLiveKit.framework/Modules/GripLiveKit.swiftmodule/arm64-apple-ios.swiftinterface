// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name GripLiveKit
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Foundation
import Security
import Swift
import SystemConfiguration
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
@_hasMissingDesignatedInitializers public class GripCloudAPIService {
  public static func sendRequest(url: Swift.String, request: Swift.String, channelId: Swift.String) -> Swift.Bool
  @objc deinit
}
@objc public enum VOD_TYPE : Swift.Int {
  @objc(HOME) case HOME
  @objc(LIVE_WIDGET) case LIVE_WIDGET
  @objc(SHORTS_WIDGET) case SHORTS_WIDGET
  @objc(BANNER_WIDGET) case BANNER_WIDGET
  @objc(LIVE_PLAYER) case LIVE_PLAYER
  @objc(SHORTS_PLAYER) case SHORTS_PLAYER
  public var KEY: Swift.String {
    get
  }
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class VOD_TYPE_OBJC : ObjectiveC.NSObject {
  @objc public static func key(for type: GripLiveKit.VOD_TYPE) -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ModelBuilder {
  public static func initData(channelId: Swift.String, type: Swift.String, id: Swift.String, nick: Swift.String, gender: Swift.String? = nil, age: Swift.String? = nil) -> GripLiveKit.RequestParams
  @objc deinit
}
@_hasMissingDesignatedInitializers public class RequestParams : Swift.Codable {
  public func getAccessKey() -> Swift.String?
  public func getOsCd() -> Swift.String?
  public func getSecretKey() -> Swift.String?
  public func getUserId() -> Swift.String?
  public func getChannelId() -> Swift.String?
  public func getType() -> Swift.String?
  public func getUserInfo() -> GripLiveKit.UserInfo?
  public func setAccessKey(_ accessKey: Swift.String) -> GripLiveKit.RequestParams
  public func setSecretKey(_ secretKey: Swift.String) -> GripLiveKit.RequestParams
  public func setOsCd(_ osCd: Swift.String) -> GripLiveKit.RequestParams
  public func setUserId(_ userId: Swift.String) -> GripLiveKit.RequestParams
  public func setChannelId(_ channelId: Swift.String) -> GripLiveKit.RequestParams
  public func setType(_ type: Swift.String) -> GripLiveKit.RequestParams
  public func setMemberData(_ userInfo: GripLiveKit.UserInfo) -> GripLiveKit.RequestParams
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc public enum ERROR_CASE : Swift.Int {
  case AUTH_FAILED
  case NETWORK_ERROR
  case SERVER_ERROR
  case INVALID_DATA
  case INVALID_CHANNEL_ID
  case ENCODING_FAILED
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class ERROR_OBJC : ObjectiveC.NSObject {
  @objc public static func CODE(for error: GripLiveKit.ERROR_CASE) -> Swift.String
  @objc public static func DESCRIPTION(for error: GripLiveKit.ERROR_CASE) -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum FloatingLocation : Swift.Int {
  case topLeft
  case topRight
  case bottomLeft
  case bottomRight
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum SUCCESS : Swift.Int {
  case PLAY_SUCCESS
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class SUCCESS_OBJC : ObjectiveC.NSObject {
  @objc public static func CODE(for success: GripLiveKit.SUCCESS) -> Swift.String
  @objc public static func DESCRIPTION(for success: GripLiveKit.SUCCESS) -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class UserInfo : ObjectiveC.NSObject, Swift.Codable {
  @objc public func getId() -> Swift.String?
  @objc public func getNick() -> Swift.String?
  @objc public func getGender() -> Swift.String?
  @objc public func getAge() -> Swift.String?
  @objc public func setId(_ id: Swift.String) -> GripLiveKit.UserInfo
  @objc public func setNick(_ nick: Swift.String) -> GripLiveKit.UserInfo
  @discardableResult
  @objc public func setGender(_ gender: Swift.String) -> GripLiveKit.UserInfo
  @discardableResult
  @objc public func setAge(_ age: Swift.String) -> GripLiveKit.UserInfo
  @objc override dynamic public init()
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@objc public protocol PlayerViewDelegate {
  @objc func playerViewPresenting(isPresent: Swift.Bool, message: Swift.String)
  @objc func webViewDidFinishLoad(isLoad: Swift.Bool, message: Swift.String)
}
@objc public protocol GripCloudDelegate {
  @objc func handleError(_ code: Swift.String, message: Swift.String)
  @objc func handleSuccess(_ code: Swift.String, message: Swift.String)
  @objc func networkConnectStatus(_ isConnected: Swift.Bool, message: Swift.String)
}
@_inheritsConvenienceInitializers @objc public class GripCloud : ObjectiveC.NSObject {
  public static let shared: GripLiveKit.GripCloud
  @objc override dynamic public init()
  @objc weak public static var delegate: GripLiveKit.GripCloudDelegate?
  @objc weak public static var networkDelegate: GripLiveKit.GripCloudDelegate?
  @objc public static func play(channelId: Swift.String, type: Swift.String, userInfo: GripLiveKit.UserInfo, isFloating: Swift.Bool, floatingLocation: GripLiveKit.FloatingLocation, playerDelegate: GripLiveKit.PlayerViewDelegate)
  @objc public static func getUUID() -> Swift.String
  @objc deinit
}
extension GripLiveKit.VOD_TYPE : Swift.Equatable {}
extension GripLiveKit.VOD_TYPE : Swift.Hashable {}
extension GripLiveKit.VOD_TYPE : Swift.RawRepresentable {}
extension GripLiveKit.ERROR_CASE : Swift.Equatable {}
extension GripLiveKit.ERROR_CASE : Swift.Hashable {}
extension GripLiveKit.ERROR_CASE : Swift.RawRepresentable {}
extension GripLiveKit.FloatingLocation : Swift.Equatable {}
extension GripLiveKit.FloatingLocation : Swift.Hashable {}
extension GripLiveKit.FloatingLocation : Swift.RawRepresentable {}
extension GripLiveKit.SUCCESS : Swift.Equatable {}
extension GripLiveKit.SUCCESS : Swift.Hashable {}
extension GripLiveKit.SUCCESS : Swift.RawRepresentable {}
